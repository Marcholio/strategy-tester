{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","utils/technicalIndicators.ts","components/Chart.tsx","simulation.ts","strategies.ts","components/Simulation/TotalResult.tsx","components/Simulation/TransactionTable.tsx","components/Simulation/index.tsx","utils/mapData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","AppBar","position","sx","marginBottom","Toolbar","Typography","variant","Footer","Box","display","justifyContent","marginTop","padding","bgcolor","href","target","rel","indicators","ema200","key","type","period","description","Chart","data","selectedIndicators","compressedData","compressionRatio","Math","ceil","length","filter","d","idx","compress","LineChart","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","yAxisId","dot","runSimulation","strategy","cash","shares","value","profit","transactions","curMonth","name","slice","invested","forEach","datapoint","startsWith","buy","sharesBought","price","transaction","amount","date","push","sell","totalValue","dollarCostAveraging","ema200Strategy","TotalResult","outcome","paddingLeft","TableContainer","Table","size","TableBody","TableRow","TableCell","align","toFixed","TransactionTable","TableHead","map","tx","toUpperCase","Simulation","useState","outcome1","setOutcome1","outcome2","setOutcome2","simulationRunning","setSimulationRunning","Grid","container","margin","item","xs","textAlign","LoadingButton","loading","onClick","dcaOutcome","ema200Outcome","disabled","mapData","priceData","ema200Data","Object","keys","reverse","parseFloat","App","reduce","acc","cur","setSelectedIndicators","sp500Price","sp500Ema200","FormGroup","values","indicator","FormControlLabel","control","Checkbox","checked","onChange","toggleIndicator","label","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.422fb9c0.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Typography, Toolbar } from \"@mui/material\";\n\nconst Header = () => (\n  <AppBar position=\"static\" sx={{ marginBottom: \"1rem\" }}>\n    <Toolbar>\n      <Typography variant=\"h5\">STRATEGY TESTER</Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@mui/system\";\n\nconst Footer = () => (\n  <Box\n    sx={{\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      marginTop: \"1rem\",\n      padding: \"1rem\",\n      bgcolor: \"#ddd\",\n    }}\n  >\n    <span>Copyright © 2021 Markus Tyrkkö</span>\n    <span>\n      <a\n        href=\"https://github.com/Marcholio/strategy-tester\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Source code\n      </a>\n    </span>\n    <span>\n      icons from:{\" \"}\n      <a href=\"https://icons8.com\" target=\"_blank\" rel=\"noreferrer\">\n        icons8.com\n      </a>\n    </span>\n  </Box>\n);\n\nexport default Footer;\n","type TechnicalIndicator = {\n  key: string;\n  type: string;\n  period: number;\n  description: string;\n};\n\nconst ema200: TechnicalIndicator = {\n  key: \"ema200\",\n  type: \"EMA\",\n  period: 200,\n  description: \"200 Exponential Moving Average (EMA)\",\n};\n\nconst indicators = {\n  ema200,\n};\n\nexport default indicators;\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nimport indicators from \"../utils/technicalIndicators\";\n\nimport { GraphDataPoint } from \"../types\";\n\nconst RECHARTS_MAX_DATAPOINTS = 1000;\n\n// Compress the data for performance reasons\n// Only affects charting, does not affect simulation itself\nconst compress = (data: GraphDataPoint[]): GraphDataPoint[] => {\n  const compressionRatio = Math.ceil(data.length / RECHARTS_MAX_DATAPOINTS);\n\n  return data.filter((d, idx) => idx % compressionRatio === 0);\n};\n\nconst Chart = ({\n  data,\n  selectedIndicators,\n}: {\n  data: GraphDataPoint[];\n  selectedIndicators: { [key: string]: boolean };\n}) => {\n  const compressedData = compress(data);\n  return (\n    <LineChart\n      data={compressedData}\n      width={window.innerWidth * (10 / 12) * 0.9}\n      height={window.innerHeight * 0.9}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line\n        type=\"monotone\"\n        dataKey=\"price\"\n        stroke=\"#0000ff\"\n        yAxisId={0}\n        dot={false}\n      />\n      {selectedIndicators[indicators.ema200.key] && (\n        <Line\n          type=\"monotone\"\n          dataKey=\"ema200\"\n          stroke=\"#00ff00\"\n          yAxisId={0}\n          dot={false}\n        />\n      )}\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import {\n  GraphDataPoint,\n  SimulationOutcome,\n  Strategy,\n  Transaction,\n} from \"./types\";\n\nexport const runSimulation = (\n  data: GraphDataPoint[],\n  strategy: Strategy\n): SimulationOutcome => {\n  const monthlySaving = 100;\n  // TODO: Transaction costs\n\n  let cash = 1000;\n  let shares = 0;\n\n  if (data.length === 0) {\n    return {\n      cash,\n      shares,\n      value: cash,\n      profit: 0,\n      transactions: [],\n    };\n  }\n\n  let curMonth = data[0].name.slice(0, 7);\n  let invested = cash;\n  const transactions: Transaction[] = [];\n\n  // TODO: Implement cooldown\n\n  data.forEach((datapoint) => {\n    // Add money to account once per month, ie. when month changes\n    if (!datapoint.name.startsWith(curMonth)) {\n      cash += monthlySaving;\n      invested += monthlySaving;\n      curMonth = datapoint.name.slice(0, 7);\n    }\n\n    // Buy\n    if (strategy.buy(datapoint)) {\n      if (cash > 0) {\n        const sharesBought = cash / datapoint.price;\n\n        const transaction: Transaction = {\n          type: \"buy\",\n          amount: cash / datapoint.price,\n          cash: datapoint.price * sharesBought,\n          date: datapoint.name,\n        };\n        shares += transaction.amount;\n        cash -= transaction.cash;\n\n        transactions.push(transaction);\n      }\n    }\n\n    // Sell\n    if (strategy.sell(datapoint)) {\n      if (shares > 0) {\n        const transaction: Transaction = {\n          type: \"sell\",\n          amount: shares,\n          cash: shares * datapoint.price,\n          date: datapoint.name,\n        };\n\n        cash += transaction.cash;\n        shares = 0; // TODO: Sell smaller positions\n\n        transactions.push(transaction);\n      }\n    }\n  });\n\n  const totalValue = cash + shares * data[data.length - 1].price;\n\n  return {\n    cash,\n    shares,\n    value: totalValue,\n    profit: (totalValue / invested - 1) * 100,\n    transactions,\n  };\n};\n","import { GraphDataPoint, Strategy } from \"./types\";\n\n/**\n * The base strategy to compare to.\n * Buy with fixed amount of money every month.\n * Never sell.\n */\nexport const dollarCostAveraging: Strategy = {\n  buy: () => true,\n  sell: () => false,\n};\n\n/**\n * Exponential moving average strategy.\n * Buy if price is rising.\n * Sell if price is falling.\n */\nexport const ema200Strategy: Strategy = {\n  buy: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price > datapoint.ema200,\n  sell: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price < datapoint.ema200,\n};\n","import React from \"react\";\nimport {\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { SimulationOutcome } from \"../../types\";\n\n// TODO: Highlight the winning strategy somehow\n\nconst TotalResult = ({ outcome }: { outcome: SimulationOutcome }) => (\n  <Box sx={{ width: \"50%\", paddingLeft: \"25%\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"center\">Cash</TableCell>\n            <TableCell align=\"center\">{outcome.cash.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">{outcome.shares.toFixed(1)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Total</TableCell>\n            <TableCell align=\"center\">{outcome.value.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Profit</TableCell>\n            <TableCell align=\"center\">{outcome.profit.toFixed(1)} %</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TotalResult;\n","import React from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Transaction } from \"../../types\";\n\nconst TransactionTable = ({ data }: { data: Transaction[] }) => (\n  <Box sx={{ width: \"80%\", paddingLeft: \"10%\", marginTop: \"1rem\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\">Date</TableCell>\n            <TableCell align=\"center\">Type</TableCell>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">Cash</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((tx, idx) => (\n            <TableRow key={idx}>\n              <TableCell align=\"center\">{tx.date}</TableCell>\n              <TableCell align=\"center\">{tx.type.toUpperCase()}</TableCell>\n              <TableCell align=\"center\">{tx.amount.toFixed(1)}</TableCell>\n              <TableCell align=\"center\">{tx.cash.toFixed(2)} €</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TransactionTable;\n","import React, { useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport { runSimulation } from \"../../simulation\";\nimport { dollarCostAveraging, ema200Strategy } from \"../../strategies\";\nimport TotalResult from \"./TotalResult\";\nimport TransactionTable from \"./TransactionTable\";\n\nimport { GraphDataPoint, SimulationOutcome } from \"../../types\";\n\nconst Simulation = ({ data }: { data: GraphDataPoint[] }) => {\n  const [outcome1, setOutcome1] = useState<SimulationOutcome>();\n  const [outcome2, setOutcome2] = useState<SimulationOutcome>();\n\n  const [simulationRunning, setSimulationRunning] = useState<boolean>(false);\n\n  const startSimulation = () => {\n    setSimulationRunning(true);\n\n    const dcaOutcome = runSimulation(data, dollarCostAveraging);\n    const ema200Outcome = runSimulation(data, ema200Strategy);\n\n    setOutcome1(dcaOutcome);\n    setOutcome2(ema200Outcome);\n\n    setSimulationRunning(false);\n  };\n\n  // TODO: Implement strategy selectors\n  // TODO: Add better descriptions for strategies\n  return (\n    <>\n      <Grid container sx={{ margin: \"2rem 0\" }}>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <span>Dollar cost averaging</span>\n          </Box>\n        </Grid>\n        <Grid item xs={2}>\n          <Box\n            sx={{\n              textAlign: \"center\",\n            }}\n          >\n            <LoadingButton\n              variant={\"outlined\"}\n              loading={simulationRunning}\n              onClick={startSimulation}\n              disabled={simulationRunning}\n            >\n              RUN SIMULATION\n            </LoadingButton>\n          </Box>\n        </Grid>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <span>EMA 200 strategy</span>\n          </Box>\n        </Grid>\n      </Grid>\n      {!simulationRunning && (\n        <>\n          <Grid container>\n            {outcome1 && (\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome1} />\n              </Grid>\n            )}\n            {outcome2 && (\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome2} />\n              </Grid>\n            )}\n          </Grid>\n          <Grid container>\n            {outcome1 && (\n              <Grid item xs={6}>\n                <TransactionTable data={outcome1.transactions} />\n              </Grid>\n            )}\n            {outcome2 && (\n              <Grid item xs={6}>\n                <TransactionTable data={outcome2.transactions} />\n              </Grid>\n            )}\n          </Grid>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Simulation;\n","import {\n  AlphavantageEmaApiResponse,\n  AlphavantagePriceApiResponse,\n  GraphDataPoint,\n} from \"../types\";\n\nconst mapData = (\n  priceData: AlphavantagePriceApiResponse,\n  ema200Data: AlphavantageEmaApiResponse\n): GraphDataPoint[] =>\n  Object.keys(priceData[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(\n        priceData[\"Time Series (Daily)\"][date][\"5. adjusted close\"]\n      ),\n      ema200: ema200Data[\"Technical Analysis: EMA\"][date]\n        ? parseFloat(ema200Data[\"Technical Analysis: EMA\"][date][\"EMA\"])\n        : null,\n    }));\n\nexport default mapData;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  Typography,\n  Divider,\n} from \"@mui/material\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Chart from \"./components/Chart\";\nimport Simulation from \"./components/Simulation\";\nimport indicators from \"./utils/technicalIndicators\";\nimport mapData from \"./utils/mapData\";\n\nimport sp500Price from \"./data/SXR8.FRK-price.json\";\nimport sp500Ema200 from \"./data/SXR8.FRK-EMA.json\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [selectedIndicators, setSelectedIndicators] = useState(\n    Object.keys(indicators).reduce((acc, cur) => {\n      acc[cur] = true;\n      return acc;\n    }, {} as { [key: string]: boolean })\n  );\n\n  const toggleIndicator = (indicator: string) => {\n    setSelectedIndicators({\n      ...selectedIndicators,\n      [indicator]: !selectedIndicators[indicator],\n    });\n  };\n\n  const data = mapData(sp500Price, sp500Ema200);\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={10}>\n          <Chart data={data} selectedIndicators={selectedIndicators} />\n        </Grid>\n        <Grid item xs={2}>\n          <Typography variant={\"h6\"}>Technical indicators</Typography>\n          <FormGroup>\n            {Object.values(indicators).map((indicator) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value={indicator.key}\n                    checked={selectedIndicators[indicator.key]}\n                    onChange={() => toggleIndicator(indicator.key)}\n                  />\n                }\n                label={indicator.description}\n                key={indicator.key}\n              />\n            ))}\n          </FormGroup>\n        </Grid>\n      </Grid>\n      <Divider sx={{ margin: \"2rem 0\" }} />\n      <Simulation data={data} />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}