{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","utils/technicalIndicators.ts","utils/chartUtils.ts","components/Chart.tsx","simulation.ts","strategies.ts","components/Simulation/TotalResult.tsx","components/Simulation/TransactionTable.tsx","components/ResultChart.tsx","components/Simulation/index.tsx","components/RSIChart.tsx","utils/mapData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","AppBar","position","sx","marginBottom","Toolbar","Typography","variant","packageInfo","version","Footer","Box","display","justifyContent","marginTop","padding","bgcolor","href","target","rel","indicators","ema200","key","type","period","description","color","ema50","rsi14","compressData","data","compressionRatio","Math","ceil","length","filter","d","idx","Chart","selectedIndicators","omitIndicators","indicator","undefined","console","warn","compressedData","LineChart","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","yAxisId","dot","Object","keys","includes","map","lineIndicator","runSimulation","strategy","params","cash","initialCash","shares","value","profit","transactions","chartData","curMonth","name","slice","invested","cooldownCounter","forEach","datapoint","index","startsWith","monthlyCash","canBuy","posSize","minPos","buy","txCost","cooldown","transaction","amount","price","totalValue","date","push","canSell","sell","strategies","dca","title","prev","cur","random","TotalResult","outcome","paddingLeft","TableContainer","Table","size","TableBody","TableRow","TableCell","align","toFixed","TransactionTable","TableHead","tx","toUpperCase","ResultChart","priceData","outcomeLeft","outcomeRight","combinedData","i","left","round","right","defaultParams","paramFieldStyle","margin","Simulation","useState","outcome1","setOutcome1","outcome2","setOutcome2","simulationRunning","setSimulationRunning","setParams","strategyId","setStrategyId","Grid","container","item","xs","textAlign","flexDirection","TextField","id","label","onChange","event","parseInt","LoadingButton","loading","onClick","dcaOutcome","disabled","Select","e","entries","MenuItem","RSIChart","min","max","ticks","parseIndicatorValue","parseFloat","mapData","ema200Data","ema50Data","rsi14Data","reverse","values","some","val","App","reduce","acc","setSelectedIndicators","sp500Price","sp500Ema200","sp500Ema50","sp500Rsi14","FormGroup","FormControlLabel","control","Checkbox","checked","toggleIndicator","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4191fb0d.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Typography, Toolbar } from \"@mui/material\";\nimport packageInfo from \"../../package.json\";\n\nconst Header = () => (\n  <AppBar position=\"static\" sx={{ marginBottom: \"1rem\" }}>\n    <Toolbar>\n      <Typography variant=\"h5\">\n        STRATEGY TESTER v{packageInfo.version}\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@mui/system\";\n\nconst Footer = () => (\n  <Box\n    sx={{\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      marginTop: \"1rem\",\n      padding: \"1rem\",\n      bgcolor: \"#ddd\",\n    }}\n  >\n    <span>Copyright © 2022 Markus Tyrkkö</span>\n    <span>\n      <a\n        href=\"https://github.com/Marcholio/strategy-tester\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Source code\n      </a>\n    </span>\n    <span>\n      icons from:{\" \"}\n      <a href=\"https://icons8.com\" target=\"_blank\" rel=\"noreferrer\">\n        icons8.com\n      </a>\n    </span>\n  </Box>\n);\n\nexport default Footer;\n","type TechnicalIndicator = {\n  key: string;\n  type: string;\n  period: number;\n  description: string;\n  color: string;\n};\n\nconst ema200: TechnicalIndicator = {\n  key: \"ema200\",\n  type: \"EMA\",\n  period: 200,\n  description: \"200 Exponential Moving Average (EMA)\",\n  color: \"#00FF00\",\n};\n\nconst ema50: TechnicalIndicator = {\n  key: \"ema50\",\n  type: \"EMA\",\n  period: 50,\n  description: \"50 Exponential Moving Average (EMA)\",\n  color: \"#FFA500\",\n};\n\nconst rsi14: TechnicalIndicator = {\n  key: \"rsi14\",\n  type: \"RSI\",\n  period: 14,\n  description: \"Relative strength index (RSI)\",\n  color: \"#673AB7\",\n};\n\nconst indicators = {\n  ema200,\n  ema50,\n  rsi14,\n};\n\nexport default indicators;\n","const RECHARTS_MAX_DATAPOINTS = 1000;\n\n// Compress the data for performance reasons\n// Only affects charting, does not affect simulation itself\nexport const compressData = <T>(\n  data: T[],\n  compressionRatio: number = Math.ceil(data.length / RECHARTS_MAX_DATAPOINTS)\n): T[] => {\n  return data.filter((d, idx) => idx % compressionRatio === 0);\n};\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nimport indicators from \"../utils/technicalIndicators\";\n\nimport { GraphDataPoint } from \"../types\";\nimport { compressData } from \"../utils/chartUtils\";\n\nconst lineIndicator = (key: string) => {\n  if (key in indicators) {\n    const indicator = indicators[key as keyof typeof indicators];\n    return (\n      <Line\n        key={key}\n        type=\"monotone\"\n        dataKey={indicator.key}\n        stroke={indicator.color}\n        yAxisId={0}\n        dot={false}\n      />\n    );\n  }\n\n  return null;\n};\n\nconst Chart = ({\n  data,\n  selectedIndicators,\n  omitIndicators,\n}: {\n  data: GraphDataPoint[];\n  selectedIndicators: { [key: string]: boolean };\n  omitIndicators: string[];\n}) => {\n  if (\n    omitIndicators.filter(\n      (indicator) => selectedIndicators[indicator] === undefined\n    ).length > 0\n  ) {\n    console.warn(\n      \"WARNING: omitted indicators not present in selected indicators!\"\n    );\n  }\n\n  const compressedData = compressData<GraphDataPoint>(data);\n  return (\n    <LineChart\n      data={compressedData}\n      width={window.innerWidth * (10 / 12) * 0.9}\n      height={window.innerHeight * 0.6}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line\n        type=\"monotone\"\n        dataKey=\"price\"\n        stroke=\"#0000ff\"\n        yAxisId={0}\n        dot={false}\n      />\n      {Object.keys(selectedIndicators)\n        .filter(\n          (key) => !omitIndicators.includes(key) && selectedIndicators[key]\n        )\n        .map((key) => lineIndicator(key))}\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import {\n  GraphDataPoint,\n  SimulationOutcome,\n  SimulationParams,\n  Strategy,\n  Transaction,\n} from \"./types\";\n\nexport const runSimulation = (\n  data: GraphDataPoint[],\n  strategy: Strategy,\n  params: SimulationParams\n): SimulationOutcome => {\n  let cash = params.initialCash;\n  let shares = 0;\n\n  if (data.length === 0) {\n    return {\n      cash,\n      shares,\n      value: cash,\n      profit: 0,\n      transactions: [],\n      chartData: [],\n    };\n  }\n\n  let curMonth = data[0].name.slice(0, 7);\n  let invested = cash;\n  const transactions: Transaction[] = [];\n  const chartData: SimulationOutcome[\"chartData\"] = [];\n\n  let cooldownCounter = 0;\n\n  data.forEach((datapoint, index) => {\n    if (index === 0) {\n      return;\n    }\n\n    cooldownCounter -= 1;\n    if (!datapoint.name.startsWith(curMonth)) {\n      // Add money to account once per month, ie. when month changes\n      cash += params.monthlyCash;\n      invested += params.monthlyCash;\n      curMonth = datapoint.name.slice(0, 7);\n    }\n\n    const canBuy = (params.posSize / 100) * cash >= params.minPos;\n\n    // Buy\n    if (strategy.buy(data[index - 1], datapoint) && canBuy) {\n      if (cash > params.txCost && cooldownCounter <= 0) {\n        cooldownCounter = params.cooldown;\n        cash -= params.txCost; // TODO: Implement percentage based price\n\n        const sharesBought = ((params.posSize / 100) * cash) / datapoint.price;\n\n        const transaction: Transaction = {\n          type: \"buy\",\n          amount: sharesBought,\n          totalValue: shares * datapoint.price + cash,\n          price: datapoint.price,\n          date: datapoint.name,\n        };\n        shares += transaction.amount;\n        cash -= transaction.amount * datapoint.price;\n\n        transactions.push(transaction);\n      }\n    }\n\n    const canSell =\n      shares * datapoint.price * (params.posSize / 100) >= params.minPos;\n\n    // Sell\n    if (strategy.sell(data[index - 1], datapoint) && canSell) {\n      if (shares * datapoint.price > params.txCost && cooldownCounter <= 0) {\n        cooldownCounter = params.cooldown;\n        cash -= params.txCost;\n\n        const transaction: Transaction = {\n          type: \"sell\",\n          amount: shares,\n          totalValue: cash + shares * datapoint.price,\n          price: datapoint.price,\n          date: datapoint.name,\n        };\n\n        cash += shares * datapoint.price;\n        shares -= transaction.amount;\n\n        transactions.push(transaction);\n      }\n    }\n\n    chartData.push({\n      name: datapoint.name,\n      value:\n        invested > 0\n          ? ((cash + shares * datapoint.price) / invested - 1) * 100\n          : 0,\n    });\n  });\n\n  const totalValue = cash + shares * data[data.length - 1].price;\n\n  return {\n    cash,\n    shares,\n    value: totalValue,\n    profit: (totalValue / invested - 1) * 100,\n    transactions,\n    chartData,\n  };\n};\n","import { Strategy } from \"./types\";\n\n// TODO: Add more strategies,eg.\n// MACD\n\n// TODO: Add support for custom strategies\n\n/**\n * The base strategy to compare to.\n * Buy with fixed amount of money every month.\n * Never sell.\n */\nexport const dollarCostAveraging: Strategy = {\n  title: \"Dollar cost averaging\",\n  description: \"Buy with same amount every month. Never sell.\",\n  buy: () => true,\n  sell: () => false,\n};\n\n/**\n * Exponential moving average strategy.\n * Buy if price is rising.\n * Sell if price is falling.\n */\nexport const ema200Strategy: Strategy = {\n  title: \"EMA 200 Strategy\",\n  description:\n    \"Buy when price is above 200EMA, sell when price is below 200EMA\",\n  buy: (prev, cur) => cur.price > cur.ema200,\n  sell: (prev, cur) => cur.price < cur.ema200,\n};\n\n/**\n * Exponential moving average strategy.\n * Buy if price is rising.\n * Sell if price is falling.\n */\nexport const ema50Strategy: Strategy = {\n  title: \"EMA 50 Strategy\",\n  description: \"Buy when price is above 50EMA, sell when price is below 50EMA\",\n  buy: (prev, cur) => cur.price > cur.ema50,\n  sell: (prev, cur) => cur.price < cur.ema50,\n};\n\n/**\n * Relative strength index strategy.\n * Buy, if price is oversold\n * Sell, if price is overbought\n */\nexport const rsi14Strategy: Strategy = {\n  title: \"RSI 14 Strategy\",\n  description: \"Buy when RSI breaks above 30, sell when RSI is breaks below 70\",\n  buy: (prev, cur) => prev.rsi14 < 30 && cur.rsi14 >= 30,\n  sell: (prev, cur) => false, // prev.rsi14 > 70 && cur.rsi14 <= 70,\n};\n\n/**\n * Random strategy, ie. \"blind monkey\"\n */\nexport const randomStrategy: Strategy = {\n  title: \"Random strategy\",\n  description: \"Buy or sell with 5% probability\",\n  buy: (prev, cur) => Math.random() < 0.05,\n  sell: (prev, cur) => Math.random() < 0.05,\n};\n\nconst strategies = {\n  dca: dollarCostAveraging,\n  ema200: ema200Strategy,\n  ema50: ema50Strategy,\n  rsi14: rsi14Strategy,\n  random: randomStrategy,\n};\n\nexport default strategies;\n","import React from \"react\";\nimport {\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { SimulationOutcome } from \"../../types\";\n\nconst TotalResult = ({ outcome }: { outcome: SimulationOutcome }) => (\n  <Box sx={{ width: \"50%\", paddingLeft: \"25%\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"center\">Cash</TableCell>\n            <TableCell align=\"center\">{outcome.cash.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">{outcome.shares.toFixed(1)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Total</TableCell>\n            <TableCell align=\"center\">{outcome.value.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Profit</TableCell>\n            <TableCell align=\"center\">{outcome.profit.toFixed(1)} %</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TotalResult;\n","import React from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Transaction } from \"../../types\";\n\nconst TransactionTable = ({ data }: { data: Transaction[] }) => (\n  <Box sx={{ width: \"80%\", paddingLeft: \"10%\", marginTop: \"1rem\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\">Date</TableCell>\n            <TableCell align=\"center\">Type</TableCell>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">Price</TableCell>\n            <TableCell align=\"center\">Value</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((tx, idx) => (\n            <TableRow key={idx}>\n              <TableCell align=\"center\">{tx.date}</TableCell>\n              <TableCell align=\"center\">{tx.type.toUpperCase()}</TableCell>\n              <TableCell align=\"center\">{tx.amount.toFixed(1)}</TableCell>\n              <TableCell align=\"center\">{tx.price.toFixed(2)} €</TableCell>\n              <TableCell align=\"center\">{tx.totalValue.toFixed(2)} €</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TransactionTable;\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nimport { GraphDataPoint, SimulationOutcome } from \"../types\";\nimport { compressData } from \"../utils/chartUtils\";\n\nconst ResultChart = ({\n  priceData,\n  outcomeLeft,\n  outcomeRight,\n}: {\n  priceData: GraphDataPoint[];\n  outcomeLeft: SimulationOutcome;\n  outcomeRight: SimulationOutcome;\n}) => {\n  const combinedData = outcomeLeft.chartData.map((datapoint, i) => ({\n    name: datapoint.name,\n    left: Math.round(datapoint.value * 100) / 100,\n    right: Math.round(outcomeRight.chartData[i].value * 100) / 100,\n  }));\n\n  const compressedData = compressData(combinedData);\n\n  return (\n    <LineChart\n      data={compressedData}\n      width={window.innerWidth * 0.9}\n      height={500}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line\n        type=\"monotone\"\n        dataKey=\"left\"\n        stroke=\"#ff5722\"\n        yAxisId={0}\n        dot={false}\n      />\n      <Line\n        type=\"monotone\"\n        dataKey=\"right\"\n        stroke=\"#4caf50\"\n        yAxisId={0}\n        dot={false}\n      />\n    </LineChart>\n  );\n};\n\nexport default ResultChart;\n","import React, { useState } from \"react\";\nimport { Grid, TextField, Typography, Select, MenuItem } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport { runSimulation } from \"../../simulation\";\nimport strategies from \"../../strategies\";\nimport TotalResult from \"./TotalResult\";\nimport TransactionTable from \"./TransactionTable\";\nimport ResultChart from \"../ResultChart\";\n\nimport {\n  GraphDataPoint,\n  SimulationOutcome,\n  SimulationParams,\n} from \"../../types\";\n\ntype StrategyId = keyof typeof strategies;\n\nconst defaultParams: SimulationParams = {\n  initialCash: 100,\n  monthlyCash: 100,\n  txCost: 5,\n  cooldown: 20,\n  posSize: 20,\n  minPos: 100,\n};\n\nconst paramFieldStyle = {\n  margin: \"12px 0\",\n};\n\nconst Simulation = ({ data }: { data: GraphDataPoint[] }) => {\n  const [outcome1, setOutcome1] = useState<SimulationOutcome>();\n  const [outcome2, setOutcome2] = useState<SimulationOutcome>();\n\n  const [simulationRunning, setSimulationRunning] = useState<boolean>(false);\n\n  const [params, setParams] = useState<SimulationParams>(defaultParams);\n\n  const [strategyId, setStrategyId] = useState<StrategyId>(\"ema200\");\n\n  const startSimulation = () => {\n    setSimulationRunning(true);\n\n    const dcaOutcome = runSimulation(data, strategies.dca, params);\n    const outcome2 = runSimulation(data, strategies[strategyId], params);\n\n    setOutcome1(dcaOutcome);\n    setOutcome2(outcome2);\n\n    setSimulationRunning(false);\n  };\n\n  return (\n    <>\n      <Grid container sx={{ margin: \"2rem 0\" }}>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <Typography variant=\"h6\">{strategies.dca.title}</Typography>\n            <Typography variant=\"body1\">\n              {strategies.dca.description}\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item xs={2}>\n          <Box\n            sx={{\n              textAlign: \"center\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography variant={\"h6\"}>Parameters</Typography>\n            <TextField\n              id=\"initialCash\"\n              label=\"Initial cash (€/$)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.initialCash}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  initialCash: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"monthlyCash\"\n              label=\"Monthly investment (€/$)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.monthlyCash}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  monthlyCash: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"txCost\"\n              label=\"Transaction fee (€/$)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.txCost}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  txCost: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"cooldown\"\n              label=\"Cooldown (days)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.cooldown}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  cooldown: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"posSize\"\n              label=\"Position size (%)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.posSize}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  posSize: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"minPos\"\n              label=\"Minimum position (€/$)\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.minPos}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  minPos: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <LoadingButton\n              variant={\"outlined\"}\n              loading={simulationRunning}\n              onClick={startSimulation}\n              disabled={simulationRunning}\n            >\n              RUN SIMULATION\n            </LoadingButton>\n          </Box>\n        </Grid>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <Select\n              value={strategyId}\n              onChange={(e) => {\n                setStrategyId(e.target.value as StrategyId);\n              }}\n            >\n              {Object.entries(strategies).map(([key, value]) => (\n                <MenuItem key={key} value={key}>\n                  {value.title}\n                </MenuItem>\n              ))}\n            </Select>\n            <Typography variant=\"body1\">\n              {strategies[strategyId].description}\n            </Typography>\n          </Box>\n        </Grid>\n      </Grid>\n      {!simulationRunning && outcome1 && outcome2 && (\n        <>\n          <ResultChart\n            priceData={data}\n            outcomeLeft={outcome1}\n            outcomeRight={outcome2}\n          />\n          <Grid container>\n            {\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome1} />\n              </Grid>\n            }\n            {\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome2} />\n              </Grid>\n            }\n          </Grid>\n          <Grid container>\n            {\n              <Grid item xs={6}>\n                <TransactionTable data={outcome1.transactions} />\n              </Grid>\n            }\n            {\n              <Grid item xs={6}>\n                <TransactionTable data={outcome2.transactions} />\n              </Grid>\n            }\n          </Grid>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Simulation;\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  YAxis,\n  Tooltip,\n  XAxis,\n} from \"recharts\";\n\nimport { GraphDataPoint } from \"../types\";\nimport { compressData } from \"../utils/chartUtils\";\nimport indicators from \"../utils/technicalIndicators\";\n\nconst RSIChart = ({ data }: { data: GraphDataPoint[] }) => {\n  const compressedData = compressData(data);\n  return (\n    <LineChart\n      data={compressedData}\n      width={window.innerWidth * (10 / 12) * 0.9}\n      height={250}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis min={0} max={100} ticks={[30, 70]} />\n      <Tooltip />\n      <CartesianGrid stroke=\"#c0c0c0\" />\n      <Line\n        type=\"monotone\"\n        dataKey={indicators.rsi14.key}\n        stroke={indicators.rsi14.color}\n        yAxisId={0}\n        dot={false}\n      />\n    </LineChart>\n  );\n};\n\nexport default RSIChart;\n","import {\n  AlphavantageEmaApiResponse,\n  AlphavantageIndicator,\n  AlphavantagePriceApiResponse,\n  AlphavantageRsiApiResponse,\n  GraphDataPoint,\n} from \"../types\";\n\nconst parseIndicatorValue = (\n  data: AlphavantageRsiApiResponse | AlphavantageEmaApiResponse,\n  date: string,\n  indicator: AlphavantageIndicator\n): number | null =>\n  // @ts-ignore\n  data[`Technical Analysis: ${indicator}`][date]\n    ? // @ts-ignore\n      parseFloat(data[`Technical Analysis: ${indicator}`][date][indicator])\n    : null;\n\nconst mapData = (\n  priceData: AlphavantagePriceApiResponse,\n  ema200Data: AlphavantageEmaApiResponse,\n  ema50Data: AlphavantageEmaApiResponse,\n  rsi14Data: AlphavantageRsiApiResponse\n): GraphDataPoint[] =>\n  Object.keys(priceData[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(priceData[\"Time Series (Daily)\"][date][\"4. close\"]),\n      ema200: parseIndicatorValue(ema200Data, date, \"EMA\"),\n      ema50: parseIndicatorValue(ema50Data, date, \"EMA\"),\n      rsi14: parseIndicatorValue(rsi14Data, date, \"RSI\"),\n    }))\n    .filter(\n      (d) => !Object.values(d).some((val) => val === null)\n    ) as GraphDataPoint[]; // Ensure that all datapoints have all indicators defined\n\nexport default mapData;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  Typography,\n  Divider,\n} from \"@mui/material\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Chart from \"./components/Chart\";\nimport Simulation from \"./components/Simulation\";\nimport RSIChart from \"./components/RSIChart\";\nimport indicators from \"./utils/technicalIndicators\";\nimport mapData from \"./utils/mapData\";\n\nimport sp500Price from \"./data/SXR8.FRK-price.json\";\nimport sp500Ema200 from \"./data/SXR8.FRK-EMA-200.json\";\nimport sp500Ema50 from \"./data/SXR8.FRK-EMA-50.json\";\nimport sp500Rsi14 from \"./data/SXR8.FRK-RSI-14.json\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [selectedIndicators, setSelectedIndicators] = useState(\n    Object.keys(indicators).reduce((acc, cur) => {\n      acc[cur] = true;\n      return acc;\n    }, {} as { [key: string]: boolean })\n  );\n\n  const toggleIndicator = (indicator: string) => {\n    setSelectedIndicators({\n      ...selectedIndicators,\n      [indicator]: !selectedIndicators[indicator],\n    });\n  };\n\n  const data = mapData(sp500Price, sp500Ema200, sp500Ema50, sp500Rsi14);\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={10}>\n          <Chart\n            data={data}\n            selectedIndicators={selectedIndicators}\n            omitIndicators={[indicators.rsi14.key]}\n          />\n          {selectedIndicators[indicators.rsi14.key] && <RSIChart data={data} />}\n        </Grid>\n        <Grid item xs={2}>\n          <Typography variant={\"h6\"}>Technical indicators</Typography>\n          <FormGroup>\n            {Object.values(indicators).map((indicator) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value={indicator.key}\n                    checked={selectedIndicators[indicator.key]}\n                    onChange={() => toggleIndicator(indicator.key)}\n                  />\n                }\n                label={indicator.description}\n                key={indicator.key}\n              />\n            ))}\n          </FormGroup>\n        </Grid>\n      </Grid>\n      <Divider sx={{ margin: \"2rem 0\" }} />\n      <Simulation data={data} />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}