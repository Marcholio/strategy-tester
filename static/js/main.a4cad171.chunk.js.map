{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","utils/technicalIndicators.ts","components/Chart.tsx","simulation.ts","strategies.ts","components/Simulation/TotalResult.tsx","components/Simulation/TransactionTable.tsx","components/Simulation/index.tsx","utils/mapData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","AppBar","position","sx","marginBottom","Toolbar","Typography","variant","packageInfo","version","Footer","Box","display","justifyContent","marginTop","padding","bgcolor","href","target","rel","indicators","ema200","key","type","period","description","Chart","data","selectedIndicators","compressedData","compressionRatio","Math","ceil","length","filter","d","idx","compress","LineChart","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","yAxisId","dot","runSimulation","strategy","params","cash","initialCash","shares","value","profit","transactions","curMonth","name","slice","invested","cooldownCounter","forEach","datapoint","startsWith","monthlyCash","buy","txCost","cooldown","transaction","amount","price","totalValue","date","push","sell","dollarCostAveraging","ema200Strategy","TotalResult","outcome","paddingLeft","TableContainer","Table","size","TableBody","TableRow","TableCell","align","toFixed","TransactionTable","TableHead","map","tx","toUpperCase","defaultParams","paramFieldStyle","margin","Simulation","useState","outcome1","setOutcome1","outcome2","setOutcome2","simulationRunning","setSimulationRunning","setParams","Grid","container","item","xs","textAlign","TextField","id","label","onChange","event","parseInt","LoadingButton","loading","onClick","dcaOutcome","ema200Outcome","disabled","mapData","priceData","ema200Data","ema50Data","Object","keys","reverse","parseFloat","ema50","App","reduce","acc","cur","setSelectedIndicators","sp500Price","sp500Ema200","sp500Ema50","FormGroup","values","indicator","FormControlLabel","control","Checkbox","checked","toggleIndicator","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4cad171.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Typography, Toolbar } from \"@mui/material\";\nimport packageInfo from \"../../package.json\";\n\nconst Header = () => (\n  <AppBar position=\"static\" sx={{ marginBottom: \"1rem\" }}>\n    <Toolbar>\n      <Typography variant=\"h5\">\n        STRATEGY TESTER v{packageInfo.version}\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@mui/system\";\n\nconst Footer = () => (\n  <Box\n    sx={{\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      marginTop: \"1rem\",\n      padding: \"1rem\",\n      bgcolor: \"#ddd\",\n    }}\n  >\n    <span>Copyright © 2021 Markus Tyrkkö</span>\n    <span>\n      <a\n        href=\"https://github.com/Marcholio/strategy-tester\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Source code\n      </a>\n    </span>\n    <span>\n      icons from:{\" \"}\n      <a href=\"https://icons8.com\" target=\"_blank\" rel=\"noreferrer\">\n        icons8.com\n      </a>\n    </span>\n  </Box>\n);\n\nexport default Footer;\n","type TechnicalIndicator = {\n  key: string;\n  type: string;\n  period: number;\n  description: string;\n};\n\nconst ema200: TechnicalIndicator = {\n  key: \"ema200\",\n  type: \"EMA\",\n  period: 200,\n  description: \"200 Exponential Moving Average (EMA)\",\n};\n\nconst indicators = {\n  ema200,\n};\n\nexport default indicators;\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\n\nimport indicators from \"../utils/technicalIndicators\";\n\nimport { GraphDataPoint } from \"../types\";\n\nconst RECHARTS_MAX_DATAPOINTS = 1000;\n\n// Compress the data for performance reasons\n// Only affects charting, does not affect simulation itself\nconst compress = (data: GraphDataPoint[]): GraphDataPoint[] => {\n  const compressionRatio = Math.ceil(data.length / RECHARTS_MAX_DATAPOINTS);\n\n  return data.filter((d, idx) => idx % compressionRatio === 0);\n};\n\nconst Chart = ({\n  data,\n  selectedIndicators,\n}: {\n  data: GraphDataPoint[];\n  selectedIndicators: { [key: string]: boolean };\n}) => {\n  const compressedData = compress(data);\n  return (\n    <LineChart\n      data={compressedData}\n      width={window.innerWidth * (10 / 12) * 0.9}\n      height={window.innerHeight * 0.6}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line\n        type=\"monotone\"\n        dataKey=\"price\"\n        stroke=\"#0000ff\"\n        yAxisId={0}\n        dot={false}\n      />\n      {selectedIndicators[indicators.ema200.key] && (\n        <Line\n          type=\"monotone\"\n          dataKey=\"ema200\"\n          stroke=\"#00ff00\"\n          yAxisId={0}\n          dot={false}\n        />\n      )}\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import {\n  GraphDataPoint,\n  SimulationOutcome,\n  SimulationParams,\n  Strategy,\n  Transaction,\n} from \"./types\";\n\nexport const runSimulation = (\n  data: GraphDataPoint[],\n  strategy: Strategy,\n  params: SimulationParams\n): SimulationOutcome => {\n  let cash = params.initialCash;\n  let shares = 0;\n\n  if (data.length === 0) {\n    return {\n      cash,\n      shares,\n      value: cash,\n      profit: 0,\n      transactions: [],\n    };\n  }\n\n  let curMonth = data[0].name.slice(0, 7);\n  let invested = cash;\n  const transactions: Transaction[] = [];\n\n  let cooldownCounter = 0;\n\n  data.forEach((datapoint) => {\n    cooldownCounter -= 1;\n    // Add money to account once per month, ie. when month changes\n    if (!datapoint.name.startsWith(curMonth)) {\n      cash += params.monthlyCash;\n      invested += params.monthlyCash;\n      curMonth = datapoint.name.slice(0, 7);\n    }\n\n    // Buy\n    if (strategy.buy(datapoint)) {\n      if (cash > params.txCost && cooldownCounter <= 0) {\n        cooldownCounter = strategy.cooldown;\n        cash -= params.txCost; // TODO: Implement percentage based price\n\n        const sharesBought = cash / datapoint.price;\n\n        const transaction: Transaction = {\n          type: \"buy\",\n          amount: sharesBought,\n          totalValue: shares * datapoint.price + cash, // TODO: Buy smaller positions\n          price: datapoint.price,\n          date: datapoint.name,\n        };\n        shares += transaction.amount;\n        cash -= transaction.amount * datapoint.price;\n\n        transactions.push(transaction);\n      }\n    }\n\n    // Sell\n    if (strategy.sell(datapoint)) {\n      if (shares * datapoint.price > params.txCost && cooldownCounter <= 0) {\n        cooldownCounter = strategy.cooldown;\n        cash -= params.txCost;\n\n        const transaction: Transaction = {\n          type: \"sell\",\n          amount: shares,\n          totalValue: cash + shares * datapoint.price,\n          price: datapoint.price,\n          date: datapoint.name,\n        };\n\n        cash += shares * datapoint.price;\n        shares -= transaction.amount; // TODO: Sell smaller positions\n\n        transactions.push(transaction);\n      }\n    }\n  });\n\n  const totalValue = cash + shares * data[data.length - 1].price;\n\n  return {\n    cash,\n    shares,\n    value: totalValue,\n    profit: (totalValue / invested - 1) * 100,\n    transactions,\n  };\n};\n","import { GraphDataPoint, Strategy } from \"./types\";\n\n// TODO: Add more strategies,eg.\n// RSI\n// EMA 50\n\n/**\n * The base strategy to compare to.\n * Buy with fixed amount of money every month.\n * Never sell.\n */\nexport const dollarCostAveraging: Strategy = {\n  buy: () => true,\n  sell: () => false,\n  cooldown: 0,\n};\n\n/**\n * Exponential moving average strategy.\n * Buy if price is rising.\n * Sell if price is falling.\n */\nexport const ema200Strategy: Strategy = {\n  buy: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price > datapoint.ema200,\n  sell: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price < datapoint.ema200,\n  cooldown: 20,\n};\n","import React from \"react\";\nimport {\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\n\nimport { SimulationOutcome } from \"../../types\";\n\n// TODO: Highlight the winning strategy somehow\n\nconst TotalResult = ({ outcome }: { outcome: SimulationOutcome }) => (\n  <Box sx={{ width: \"50%\", paddingLeft: \"25%\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"center\">Cash</TableCell>\n            <TableCell align=\"center\">{outcome.cash.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">{outcome.shares.toFixed(1)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Total</TableCell>\n            <TableCell align=\"center\">{outcome.value.toFixed(2)} €</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">Profit</TableCell>\n            <TableCell align=\"center\">{outcome.profit.toFixed(1)} %</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TotalResult;\n","import React from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { Transaction } from \"../../types\";\n\nconst TransactionTable = ({ data }: { data: Transaction[] }) => (\n  <Box sx={{ width: \"80%\", paddingLeft: \"10%\", marginTop: \"1rem\" }}>\n    <TableContainer>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\">Date</TableCell>\n            <TableCell align=\"center\">Type</TableCell>\n            <TableCell align=\"center\">Shares</TableCell>\n            <TableCell align=\"center\">Price</TableCell>\n            <TableCell align=\"center\">Value</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((tx, idx) => (\n            <TableRow key={idx}>\n              <TableCell align=\"center\">{tx.date}</TableCell>\n              <TableCell align=\"center\">{tx.type.toUpperCase()}</TableCell>\n              <TableCell align=\"center\">{tx.amount.toFixed(1)}</TableCell>\n              <TableCell align=\"center\">{tx.price.toFixed(2)} €</TableCell>\n              <TableCell align=\"center\">{tx.totalValue.toFixed(2)} €</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </Box>\n);\n\nexport default TransactionTable;\n","import React, { useState } from \"react\";\nimport { Grid, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport { runSimulation } from \"../../simulation\";\nimport { dollarCostAveraging, ema200Strategy } from \"../../strategies\";\nimport TotalResult from \"./TotalResult\";\nimport TransactionTable from \"./TransactionTable\";\n\nimport {\n  GraphDataPoint,\n  SimulationOutcome,\n  SimulationParams,\n} from \"../../types\";\n\nconst defaultParams: SimulationParams = {\n  initialCash: 1000,\n  monthlyCash: 100,\n  txCost: 15,\n};\n\nconst paramFieldStyle = {\n  margin: \"12px 0\",\n};\n\nconst Simulation = ({ data }: { data: GraphDataPoint[] }) => {\n  const [outcome1, setOutcome1] = useState<SimulationOutcome>();\n  const [outcome2, setOutcome2] = useState<SimulationOutcome>();\n\n  const [simulationRunning, setSimulationRunning] = useState<boolean>(false);\n\n  const [params, setParams] = useState<SimulationParams>(defaultParams);\n\n  const startSimulation = () => {\n    setSimulationRunning(true);\n\n    const dcaOutcome = runSimulation(data, dollarCostAveraging, params);\n    const ema200Outcome = runSimulation(data, ema200Strategy, params);\n\n    setOutcome1(dcaOutcome);\n    setOutcome2(ema200Outcome);\n\n    setSimulationRunning(false);\n  };\n\n  // TODO: Implement strategy selectors\n  // TODO: Add better descriptions for strategies\n  return (\n    <>\n      <Grid container sx={{ margin: \"2rem 0\" }}>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <span>Dollar cost averaging</span>\n          </Box>\n        </Grid>\n        <Grid item xs={2}>\n          <Box\n            sx={{\n              textAlign: \"center\",\n            }}\n          >\n            <Typography variant={\"h6\"}>Parameters</Typography>\n            <TextField\n              id=\"initialCash\"\n              label=\"Initial cash\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.initialCash}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  initialCash: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"monthlyCash\"\n              label=\"Monthly investment\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.monthlyCash}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  monthlyCash: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <TextField\n              id=\"txCost\"\n              label=\"Transaction fee\"\n              variant=\"outlined\"\n              type=\"number\"\n              size=\"small\"\n              value={params.txCost}\n              onChange={(event) =>\n                setParams({\n                  ...params,\n                  txCost: parseInt(event.target.value, 10) || 0,\n                })\n              }\n              sx={paramFieldStyle}\n            />\n            <LoadingButton\n              variant={\"outlined\"}\n              loading={simulationRunning}\n              onClick={startSimulation}\n              disabled={simulationRunning}\n            >\n              RUN SIMULATION\n            </LoadingButton>\n          </Box>\n        </Grid>\n        <Grid item xs={5}>\n          <Box sx={{ textAlign: \"center\" }}>\n            <span>EMA 200 strategy</span>\n          </Box>\n        </Grid>\n      </Grid>\n      {!simulationRunning && (\n        <>\n          <Grid container>\n            {outcome1 && (\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome1} />\n              </Grid>\n            )}\n            {outcome2 && (\n              <Grid item xs={6}>\n                <TotalResult outcome={outcome2} />\n              </Grid>\n            )}\n          </Grid>\n          <Grid container>\n            {outcome1 && (\n              <Grid item xs={6}>\n                <TransactionTable data={outcome1.transactions} />\n              </Grid>\n            )}\n            {outcome2 && (\n              <Grid item xs={6}>\n                <TransactionTable data={outcome2.transactions} />\n              </Grid>\n            )}\n          </Grid>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Simulation;\n","import {\n  AlphavantageEmaApiResponse,\n  AlphavantagePriceApiResponse,\n  GraphDataPoint,\n} from \"../types\";\n\nconst mapData = (\n  priceData: AlphavantagePriceApiResponse,\n  ema200Data: AlphavantageEmaApiResponse,\n  ema50Data: AlphavantageEmaApiResponse\n): GraphDataPoint[] =>\n  Object.keys(priceData[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(\n        priceData[\"Time Series (Daily)\"][date][\"5. adjusted close\"]\n      ),\n      ema200: ema200Data[\"Technical Analysis: EMA\"][date]\n        ? parseFloat(ema200Data[\"Technical Analysis: EMA\"][date][\"EMA\"])\n        : null,\n      ema50: ema50Data[\"Technical Analysis: EMA\"][date]\n        ? parseFloat(ema50Data[\"Technical Analysis: EMA\"][date][\"EMA\"])\n        : null,\n    }))\n    .filter((d) => d.ema200 !== null); // Ensure that all datapoints have all indicators defined\n\nexport default mapData;\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  Typography,\n  Divider,\n} from \"@mui/material\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Chart from \"./components/Chart\";\nimport Simulation from \"./components/Simulation\";\nimport indicators from \"./utils/technicalIndicators\";\nimport mapData from \"./utils/mapData\";\n\nimport sp500Price from \"./data/SXR8.FRK-price.json\";\nimport sp500Ema200 from \"./data/SXR8.FRK-EMA-200.json\";\nimport sp500Ema50 from \"./data/SXR8.FRK-EMA-50.json\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [selectedIndicators, setSelectedIndicators] = useState(\n    Object.keys(indicators).reduce((acc, cur) => {\n      acc[cur] = true;\n      return acc;\n    }, {} as { [key: string]: boolean })\n  );\n\n  const toggleIndicator = (indicator: string) => {\n    setSelectedIndicators({\n      ...selectedIndicators,\n      [indicator]: !selectedIndicators[indicator],\n    });\n  };\n\n  const data = mapData(sp500Price, sp500Ema200, sp500Ema50);\n\n  // TODO: Plot strategy outcomes\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={10}>\n          <Chart data={data} selectedIndicators={selectedIndicators} />\n        </Grid>\n        <Grid item xs={2}>\n          <Typography variant={\"h6\"}>Technical indicators</Typography>\n          <FormGroup>\n            {Object.values(indicators).map((indicator) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value={indicator.key}\n                    checked={selectedIndicators[indicator.key]}\n                    onChange={() => toggleIndicator(indicator.key)}\n                  />\n                }\n                label={indicator.description}\n                key={indicator.key}\n              />\n            ))}\n          </FormGroup>\n        </Grid>\n      </Grid>\n      <Divider sx={{ margin: \"2rem 0\" }} />\n      <Simulation data={data} />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}