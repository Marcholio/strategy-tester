{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","AppBar","Footer","href","target","rel","dollarCostAveraging","buy","sell","cooldown","ema200Strategy","datapoint","ema200","price","runSimulation","data","strategy","console","log","cash","shares","length","value","profit","curMonth","name","slice","invested","forEach","startsWith","sharesBought","totalValue","mapData","priceData","ema200Data","Object","keys","reverse","map","date","parseFloat","App","useState","outcome","setOutcome","outcomeB","setOutcomeB","className","LineChart","sp500Price","sp500Ema200","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","type","yAxisId","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38cbe91c.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar } from \"@material-ui/core\";\n\nconst Header = () => <AppBar>STRATEGY TESTER</AppBar>;\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => (\n  <div>\n    Created by Markus Tyrkk√∂, icons from:{\" \"}\n    <a href=\"https://icons8.com\" target=\"_blank\" rel=\"noreferrer\">\n      icons8.com\n    </a>\n  </div>\n);\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport sp500Price from \"./data/SXR8.FRK-price.json\";\nimport sp500Ema200 from \"./data/SXR8.FRK-EMA.json\";\n\nimport \"./App.css\";\nimport {\n  AlphavantageEmaApiResponse,\n  AlphavantagePriceApiResponse,\n  GraphDataPoint,\n} from \"./types\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\ntype SimulationOutcome = {\n  cash: number;\n  shares: number;\n  value: number;\n  profit: number;\n};\n\ntype Strategy = {\n  buy: (datapoint: GraphDataPoint) => boolean;\n  sell: (datapoint: GraphDataPoint) => boolean;\n  cooldown: number;\n};\n\nconst dollarCostAveraging: Strategy = {\n  buy: () => true,\n  sell: () => false,\n  cooldown: 0,\n};\n\nconst ema200Strategy: Strategy = {\n  buy: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price > datapoint.ema200,\n  sell: (datapoint: GraphDataPoint) =>\n    datapoint.ema200 !== null && datapoint.price < datapoint.ema200,\n  cooldown: 30,\n};\n\nconst runSimulation = (\n  data: GraphDataPoint[],\n  strategy: Strategy\n): SimulationOutcome => {\n  console.log(strategy);\n  const monthlySaving = 100;\n  // TODO: Transaction costs\n\n  let cash = 1000;\n  let shares = 0;\n\n  if (data.length === 0) {\n    return {\n      cash,\n      shares,\n      value: cash,\n      profit: 0,\n    };\n  }\n\n  let curMonth = data[0].name.slice(0, 7);\n  let invested = cash;\n\n  data.forEach((datapoint) => {\n    // Add money to account once per month\n    if (!datapoint.name.startsWith(curMonth)) {\n      cash += monthlySaving;\n      invested += monthlySaving;\n      curMonth = datapoint.name.slice(0, 7);\n    }\n\n    if (strategy.buy(datapoint)) {\n      if (cash > 0) {\n        const sharesBought = cash / datapoint.price;\n        shares += sharesBought;\n        cash -= datapoint.price * sharesBought;\n      }\n    }\n\n    if (strategy.sell(datapoint)) {\n      if (shares > 0) {\n        cash += shares * datapoint.price;\n        shares = 0; // TODO: Sell smaller positions\n      }\n    }\n  });\n\n  const totalValue = cash + shares * data[data.length - 1].price;\n\n  return {\n    cash,\n    shares,\n    value: totalValue,\n    profit: (totalValue / invested - 1) * 100,\n  };\n};\n\nconst mapData = (\n  priceData: AlphavantagePriceApiResponse,\n  ema200Data: AlphavantageEmaApiResponse\n): GraphDataPoint[] =>\n  Object.keys(priceData[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(\n        priceData[\"Time Series (Daily)\"][date][\"5. adjusted close\"]\n      ),\n      ema200: ema200Data[\"Technical Analysis: EMA\"][date]\n        ? parseFloat(ema200Data[\"Technical Analysis: EMA\"][date][\"EMA\"])\n        : null,\n    }));\n\nconst App = () => {\n  const [outcome, setOutcome] = useState<SimulationOutcome>();\n  const [outcomeB, setOutcomeB] = useState<SimulationOutcome>();\n  return (\n    <div className=\"main\">\n      <Header />\n      <LineChart\n        data={mapData(sp500Price, sp500Ema200)}\n        width={window.innerWidth * 0.9}\n        height={window.innerHeight * 0.9}\n      >\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Line type=\"monotone\" dataKey=\"price\" stroke=\"#0000ff\" yAxisId={0} />\n        <Line type=\"monotone\" dataKey=\"ema200\" stroke=\"#00ff00\" yAxisId={0} />\n      </LineChart>\n      <button\n        onClick={() => {\n          setOutcome(\n            runSimulation(mapData(sp500Price, sp500Ema200), dollarCostAveraging)\n          );\n          setOutcomeB(\n            runSimulation(mapData(sp500Price, sp500Ema200), ema200Strategy)\n          );\n        }}\n      >\n        RUN SIMULATION\n      </button>\n      {\"OUTCOME\"}\n      {outcome && (\n        <span>\n          Cash: {outcome.cash}, shares: {outcome.shares}, total value:{\" \"}\n          {outcome.value}. Profit: {outcome.profit} %\n        </span>\n      )}\n      {\"OUTCOME B\"}\n      {outcomeB && (\n        <span>\n          Cash: {outcomeB.cash}, shares: {outcomeB.shares}, total value:{\" \"}\n          {outcomeB.value}. Profit: {outcomeB.profit} %\n        </span>\n      )}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}