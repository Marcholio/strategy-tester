{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","LineChart","data","name","a","b","width","window","innerWidth","height","innerHeight","XAxis","dataKey","CartesianGrid","stroke","Line","type","yAxisId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRA2BeA,EAtBH,kBACV,qBAAKC,UAAU,OAAf,SACE,eAACC,EAAA,EAAD,CACEC,KAAM,CACJ,CAAEC,KAAM,IAAKC,EAAG,EAAGC,EAAG,GACtB,CAAEF,KAAM,IAAKC,EAAG,EAAGC,EAAG,GACtB,CAAEF,KAAM,IAAKC,EAAG,EAAGC,EAAG,GACtB,CAAEF,KAAM,IAAKC,EAAG,EAAGC,EAAG,GACtB,CAAEF,KAAM,IAAKC,EAAG,EAAGC,EAAG,KAExBC,MAA2B,GAApBC,OAAOC,WACdC,OAA6B,GAArBF,OAAOG,YATjB,UAWG,IACD,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWJ,QAAQ,IAAIE,OAAO,UAAUG,QAAS,IAC5D,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWJ,QAAQ,IAAIE,OAAO,UAAUG,QAAS,UCRnDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b70c1d24.chunk.js","sourcesContent":["import React from \"react\";\nimport { CartesianGrid, Line, LineChart, Tooltip, XAxis } from \"recharts\";\n\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"main\">\n    <LineChart\n      data={[\n        { name: \"1\", a: 1, b: 2 },\n        { name: \"2\", a: 2, b: 4 },\n        { name: \"3\", a: 3, b: 6 },\n        { name: \"4\", a: 4, b: 8 },\n        { name: \"5\", a: 5, b: 10 },\n      ]}\n      width={window.innerWidth * 0.9}\n      height={window.innerHeight * 0.9}\n    >\n      {\" \"}\n      <XAxis dataKey=\"name\" />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line type=\"monotone\" dataKey=\"a\" stroke=\"#ff7300\" yAxisId={0} />\n      <Line type=\"monotone\" dataKey=\"b\" stroke=\"#387908\" yAxisId={1} />\n    </LineChart>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}