{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","LineChart","data","sp500","Object","keys","reverse","map","date","name","price","parseFloat","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","type","yAxisId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0mhhBAwCeA,EAhBH,kBACV,qBAAKC,UAAU,OAAf,SACE,eAACC,EAAA,EAAD,CACEC,MAZJA,EAYkBC,EAVlBC,OAAOC,KAAKH,EAAK,wBACdI,UACAC,KAAI,SAACC,GAAD,MAAW,CACdC,KAAMD,EACNE,MAAOC,WAAWT,EAAK,uBAAuBM,GAAM,2BAOpDI,MAA2B,GAApBC,OAAOC,WACdC,OAA6B,GAArBF,OAAOG,YAHjB,UAKE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWN,QAAQ,QAAQI,OAAO,UAAUG,QAAS,SArBtD,IACdvB,GCDawB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.223b3c17.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport sp500 from \"./data/SXR8.FRK.json\";\n\nimport \"./App.css\";\nimport { AlphavantageApiResponse } from \"./types\";\n\nconst mapData = (\n  data: AlphavantageApiResponse\n): { name: string; price: number }[] =>\n  Object.keys(data[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(data[\"Time Series (Daily)\"][date][\"5. adjusted close\"]),\n    }));\n\nconst App = () => (\n  <div className=\"main\">\n    <LineChart\n      data={mapData(sp500)}\n      width={window.innerWidth * 0.9}\n      height={window.innerHeight * 0.9}\n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid stroke=\"#f5f5f5\" />\n      <Line type=\"monotone\" dataKey=\"price\" stroke=\"#0000ff\" yAxisId={0} />\n    </LineChart>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}