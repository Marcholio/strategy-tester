{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["mapData","data","Object","keys","reverse","map","date","name","price","parseFloat","App","useState","outcome","setOutcome","className","LineChart","sp500","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","type","yAxisId","onClick","cash","shares","forEach","datapoint","value","length","runSimulation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAsCMA,EAAU,SAACC,GAAD,OACdC,OAAOC,KAAKF,EAAK,wBACdG,UACAC,KAAI,SAACC,GAAD,MAAW,CACdC,KAAMD,EACNE,MAAOC,WAAWR,EAAK,uBAAuBK,GAAM,2BAmC3CI,EAhCH,WACV,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OACE,sBAAKC,UAAU,OAAf,UACE,eAACC,EAAA,EAAD,CACEd,KAAMD,EAAQgB,GACdC,MAA2B,GAApBC,OAAOC,WACdC,OAA6B,GAArBF,OAAOG,YAHjB,UAKE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWN,QAAQ,QAAQI,OAAO,UAAUG,QAAS,OAElE,wBACEC,QAAS,WACPlB,EA3CY,SAACZ,GACrB,IAAI+B,EAAO,IACPC,EAAS,EASb,OAPAhC,EAAKiC,SAAQ,SAACC,GACRH,EAAO,IACTC,GAAUD,EAAOG,EAAU3B,MAC3BwB,GAAQG,EAAU3B,MAAQyB,MAIvB,CACLD,OACAC,SACAG,MAAOJ,EAAOC,EAAShC,EAAKA,EAAKoC,OAAS,GAAG7B,OA6B5B8B,CAActC,EAAQgB,MAFrC,4BAOCJ,GACC,0CACSA,EAAQoB,KADjB,aACiCpB,EAAQqB,OADzC,iBAC+D,IAC5DrB,EAAQwB,MAFX,aAE4BxB,EAAQwB,MAAQ,GAAK,IAFjD,YCvDOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2ed491e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport sp500 from \"./data/SXR8.FRK.json\";\n\nimport \"./App.css\";\nimport { AlphavantageApiResponse, GraphData } from \"./types\";\n\ntype SimulationOutcome = {\n  cash: number;\n  shares: number;\n  value: number;\n};\n\nconst runSimulation = (data: GraphData): SimulationOutcome => {\n  let cash = 1000;\n  let shares = 0;\n\n  data.forEach((datapoint) => {\n    if (cash > 0) {\n      shares += cash / datapoint.price;\n      cash -= datapoint.price * shares;\n    }\n  });\n\n  return {\n    cash,\n    shares,\n    value: cash + shares * data[data.length - 1].price,\n  };\n};\n\nconst mapData = (data: AlphavantageApiResponse): GraphData =>\n  Object.keys(data[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(data[\"Time Series (Daily)\"][date][\"5. adjusted close\"]),\n    }));\n\nconst App = () => {\n  const [outcome, setOutcome] = useState<SimulationOutcome>();\n  return (\n    <div className=\"main\">\n      <LineChart\n        data={mapData(sp500)}\n        width={window.innerWidth * 0.9}\n        height={window.innerHeight * 0.9}\n      >\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Line type=\"monotone\" dataKey=\"price\" stroke=\"#0000ff\" yAxisId={0} />\n      </LineChart>\n      <button\n        onClick={() => {\n          setOutcome(runSimulation(mapData(sp500)));\n        }}\n      >\n        RUN SIMULATION\n      </button>\n      {outcome && (\n        <span>\n          Cash: {outcome.cash}, shares: {outcome.shares}, total value:{\" \"}\n          {outcome.value}. Profit: {outcome.value / 10 - 100} %\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}