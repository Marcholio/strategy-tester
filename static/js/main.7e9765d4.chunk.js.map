{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["dollarCostAveraging","buy","sell","cooldown","mapData","data","Object","keys","reverse","map","date","name","price","parseFloat","App","useState","outcome","setOutcome","className","LineChart","sp500","width","window","innerWidth","height","innerHeight","XAxis","dataKey","YAxis","Tooltip","CartesianGrid","stroke","Line","type","yAxisId","onClick","strategy","console","log","cash","shares","length","value","profit","curMonth","slice","invested","forEach","datapoint","startsWith","sharesBought","totalValue","runSimulation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTA2BMA,EAAgC,CACpCC,IAAK,kBAAM,GACXC,KAAM,kBAAM,GACZC,SAAU,GA4DNC,EAAU,SAACC,GAAD,OACdC,OAAOC,KAAKF,EAAK,wBACdG,UACAC,KAAI,SAACC,GAAD,MAAW,CACdC,KAAMD,EACNE,MAAOC,WAAWR,EAAK,uBAAuBK,GAAM,2BAmC3CI,EAhCH,WACV,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OACE,sBAAKC,UAAU,OAAf,UACE,eAACC,EAAA,EAAD,CACEd,KAAMD,EAAQgB,GACdC,MAA2B,GAApBC,OAAOC,WACdC,OAA6B,GAArBF,OAAOG,YAHjB,UAKE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWN,QAAQ,QAAQI,OAAO,UAAUG,QAAS,OAElE,wBACEC,QAAS,WACPlB,EAlFY,SACpBZ,EACA+B,GAEAC,QAAQC,IAAIF,GACZ,IAGIG,EAAO,IACPC,EAAS,EAEb,GAAoB,IAAhBnC,EAAKoC,OACP,MAAO,CACLF,OACAC,SACAE,MAAOH,EACPI,OAAQ,GAIZ,IAAIC,EAAWvC,EAAK,GAAGM,KAAKkC,MAAM,EAAG,GACjCC,EAAWP,EAEflC,EAAK0C,SAAQ,SAACC,GAQZ,GANKA,EAAUrC,KAAKsC,WAAWL,KAC7BL,GArBkB,IAsBlBO,GAtBkB,IAuBlBF,EAAWI,EAAUrC,KAAKkC,MAAM,EAAG,IAGjCT,EAASnC,IAAI+C,IACXT,EAAO,EAAG,CACZ,IAAMW,EAAeX,EAAOS,EAAUpC,MACtC4B,GAAUU,EACVX,GAAQS,EAAUpC,MAAQsC,EAI1Bd,EAASlC,KAAK8C,IACZR,EAAS,IACXD,GAAQC,EAASQ,EAAUpC,MAC3B4B,EAAS,MAKf,IAAMW,EAAaZ,EAAOC,EAASnC,EAAKA,EAAKoC,OAAS,GAAG7B,MAEzD,MAAO,CACL2B,OACAC,SACAE,MAAOS,EACPR,OAAsC,KAA7BQ,EAAaL,EAAW,IA6BhBM,CAAchD,EAAQgB,GAAQpB,KAF7C,4BAOCgB,GACC,0CACSA,EAAQuB,KADjB,aACiCvB,EAAQwB,OADzC,iBAC+D,IAC5DxB,EAAQ0B,MAFX,aAE4B1B,EAAQ2B,OAFpC,YC3GOU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7e9765d4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport sp500 from \"./data/SXR8.FRK.json\";\n\nimport \"./App.css\";\nimport { AlphavantageApiResponse, GraphDataPoint } from \"./types\";\n\ntype SimulationOutcome = {\n  cash: number;\n  shares: number;\n  value: number;\n  profit: number;\n};\n\ntype Strategy = {\n  buy: (datapoint: GraphDataPoint) => boolean;\n  sell: (datapoint: GraphDataPoint) => boolean;\n  cooldown: number;\n};\n\nconst dollarCostAveraging: Strategy = {\n  buy: () => true,\n  sell: () => false,\n  cooldown: 0,\n};\n\nconst runSimulation = (\n  data: GraphDataPoint[],\n  strategy: Strategy\n): SimulationOutcome => {\n  console.log(strategy);\n  const monthlySaving = 100;\n  // TODO: Transaction costs\n\n  let cash = 1000;\n  let shares = 0;\n\n  if (data.length === 0) {\n    return {\n      cash,\n      shares,\n      value: cash,\n      profit: 0,\n    };\n  }\n\n  let curMonth = data[0].name.slice(0, 7);\n  let invested = cash;\n\n  data.forEach((datapoint) => {\n    // Add money to account once per month\n    if (!datapoint.name.startsWith(curMonth)) {\n      cash += monthlySaving;\n      invested += monthlySaving;\n      curMonth = datapoint.name.slice(0, 7);\n    }\n\n    if (strategy.buy(datapoint)) {\n      if (cash > 0) {\n        const sharesBought = cash / datapoint.price;\n        shares += sharesBought;\n        cash -= datapoint.price * sharesBought;\n      }\n    }\n\n    if (strategy.sell(datapoint)) {\n      if (shares > 0) {\n        cash += shares * datapoint.price;\n        shares = 0; // TODO: Sell smaller positions\n      }\n    }\n  });\n\n  const totalValue = cash + shares * data[data.length - 1].price;\n\n  return {\n    cash,\n    shares,\n    value: totalValue,\n    profit: (totalValue / invested - 1) * 100,\n  };\n};\n\nconst mapData = (data: AlphavantageApiResponse): GraphDataPoint[] =>\n  Object.keys(data[\"Time Series (Daily)\"])\n    .reverse()\n    .map((date) => ({\n      name: date,\n      price: parseFloat(data[\"Time Series (Daily)\"][date][\"5. adjusted close\"]),\n    }));\n\nconst App = () => {\n  const [outcome, setOutcome] = useState<SimulationOutcome>();\n  return (\n    <div className=\"main\">\n      <LineChart\n        data={mapData(sp500)}\n        width={window.innerWidth * 0.9}\n        height={window.innerHeight * 0.9}\n      >\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Line type=\"monotone\" dataKey=\"price\" stroke=\"#0000ff\" yAxisId={0} />\n      </LineChart>\n      <button\n        onClick={() => {\n          setOutcome(runSimulation(mapData(sp500), dollarCostAveraging));\n        }}\n      >\n        RUN SIMULATION\n      </button>\n      {outcome && (\n        <span>\n          Cash: {outcome.cash}, shares: {outcome.shares}, total value:{\" \"}\n          {outcome.value}. Profit: {outcome.profit} %\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}